buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}" + '/repo'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }

        dependencies {
            classpath "com.resolutebi:GradleCommonConfigurationPlugin:1.0.+"
        }
    }
}

apply plugin: 'resolute-common-config'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = 'com.resolute'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def flumeDist = 'apache-flume-1.6.0-bin'
def thisDockerImage = 'mock-flume'

resoluteDocker {
  artifacts = [
    thisDockerImage
  ]
}

dependencies {
    compile     'org.apache.flume:flume-ng-core:1.6.0'
    testCompile 'junit:junit:4.12', 
                'org.mockito:mockito-core:1.10.19',
                'org.hamcrest:hamcrest-all:1.3'     
}

clean.doFirst {
    println "docker rmi -f \$(docker images ${dockerHost}/${thisDockerImage}:previous -q)"
    exec {
        // If your environment was clean it won't delete anything, hence the true to offset the error
        commandLine "/bin/bash", "-c", "docker rmi -f ${dockerHost}/${thisDockerImage}:previous || true"
    }
    println "docker tag ${dockerHost}/${thisDockerImage} ${dockerHost}/${thisDockerImage}:previous"
    exec {
        commandLine "/bin/bash", "-c", "docker tag ${dockerHost}/${thisDockerImage} ${dockerHost}/${thisDockerImage}:previous || true"
    }
    println "docker rmi -f ${dockerHost}/${thisDockerImage}"
    exec {
        // If your environment was clean it won't delete anything, hence the true to offset the error
        commandLine "/bin/bash", "-c", "docker rmi -f ${dockerHost}/${thisDockerImage} || true"
    }
}

task packageFlume << {
  copy {
    from tarTree(resources.gzip("${projectDir}/flume-dist/${flumeDist}.tar.gz"))
    into "${buildDir}/flume"
  }
  
  file("${buildDir}/flume/${flumeDist}").renameTo("${buildDir}/flume/apache-flume")
  
  mkdir "${buildDir}/flume/apache-flume/captures"
  
  copy {
    from "${projectDir}/flume-dist/flume.conf", "${projectDir}/flume-dist/log4j.properties", 
         "${projectDir}/flume-dist/keystore.jks", "${projectDir}/flume-dist/trustcacerts.jks",
         "${projectDir}/flume-dist/flume-env.sh"
    into "${buildDir}/flume/apache-flume/conf"
    
  }
  
  copy {
    from "${buildDir}/libs"
    include "*.jar"
    into "${buildDir}/flume/apache-flume/lib" 
  }
}

task buildDocker << {
    def versionFile = project.file("${buildDir}/version.txt")
    versionFile.text = """${rootProject.name} ${project.name} ${project.version}"""
    println "docker build -t ${dockerHost}/${thisDockerImage} -f ./docker/Dockerfile ."
    exec {
        commandLine "/bin/bash", "-c", "docker build -t ${dockerHost}/${thisDockerImage} -f ./docker/Dockerfile ."
    }
    println "docker rmi -f \$(docker images ${dockerHost}/${thisDockerImage}:previous -q)"
    exec {
        // If your environment was clean it won't delete anything, hence the true to offset the error
        commandLine "/bin/bash", "-c", "docker rmi -f \$(docker images ${dockerHost}/${thisDockerImage}:previous -q) || true"
    }
}

packageFlume.finalizedBy(buildDocker)
build.finalizedBy(packageFlume)



publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

artifactoryPublish {
    publications('mavenJava')
}


